import { h, defineComponent, getCurrentInstance } from "@vue/composition-api";
import { shallowRef, computed, watch, provide, inject } from "@vue/composition-api";
import { onMounted, onBeforeUpdate, onUpdated, onBeforeUnmount, onUnmounted } from "@vue/composition-api";
import "mapbox-gl/dist/mapbox-gl.css";
import mapboxgl from "mapbox-gl";

export const MAP_SYMBOL = Symbol("MAP_SYMBOL");
export const SOURCE_ID_SYMBOL = Symbol("SOURCE_ID_SYMBOL");

export const new_id = (num => () => `_` + (num++ + Math.random()).toString(36).replace(".", "_"))(0);
export const replace_dom = (to_replace: Node, replace: Node) => {
  const parent = to_replace.parentNode!;
  parent.insertBefore(replace, to_replace);
  parent.removeChild(to_replace);
};

type Instance = ReturnType<typeof getCurrentInstance> & { [k: string]: any };

export const Map = defineComponent({
  name: "MglMap",
  props: {
    init: Object as () => Omit<mapboxgl.MapboxOptions, "container">,
    cache: mapboxgl.Map,
  },
  setup(props, ctx) {
    const ins = getCurrentInstance() as Instance;
    const { init, cache } = props;
    let map = cache!;
    if (!map) {
      const container = document.createElement("div");
      container.style.cssText = "position:absolute;top:0;right:0;bottom:0;left:0;";
      map = new mapboxgl.Map({ ...init, container });
    }
    ins.map = map;
    provide(MAP_SYMBOL, map);
    const is_map_loaded = shallowRef(false);
    onMounted(() => {
      ins.$el.appendChild(map.getContainer());
      map.resize();
      // ins.$nextTick().then(() => map?.resize());
      is_map_loaded.value = map.isStyleLoaded();
      if (!is_map_loaded.value) {
        map.once("load", () => (is_map_loaded.value = true));
      }
    });
    const wrapper_style = { width: "100%", height: "100%", position: "relative", overflow: "hidden" } as const;
    return () => {
      return h("div", { style: wrapper_style }, [is_map_loaded.value && ctx.slots.default?.()]);
    };
  },
});

// vue 的 ts 类型设计错误, 导致不能设置泛型, 从而同时约束 props.type 和 props.listener... 毕竟 mapboxgl.Map.on 签名是
// on<T extends keyof MapLayerEventType>(
//   type: T,
//   layer: string,
//   listener: (ev: MapLayerEventType[T] & EventData) => void,
// ): this;
export const Event = defineComponent({
  name: "MglEvent",
  props: {
    type: {
      type: String as () => keyof mapboxgl.MapLayerEventType,
      required: true,
    },
    layer: String,
    listener: {
      type: (null as any) as () => () => (mapboxgl.MapLayerMouseEvent | mapboxgl.MapLayerTouchEvent) &
        Record<string, any>,
      required: true,
    },
  },
  setup(props, ctx) {
    const map = inject<mapboxgl.Map>(MAP_SYMBOL)!;
    watch(
      [() => props.type, () => props.layer, () => props.listener] as const,
      (cv, pv, inv) => {
        if (cv[1]) {
          map.on(cv[0], cv[1], cv[2]);
          inv(() => map.off(cv[0], cv[1]!, cv[2]));
        } else {
          map.on(cv[0], cv[2]);
          inv(() => map.off(cv[0], cv[2]));
        }
      },
      { immediate: true },
    );
    return () => null;
  },
});

export const Images = defineComponent({
  name: "MglImages",
  props: {
    init_imgs: {
      type: Object as () => Record<string, string>,
      required: true,
    },
  },
  setup(props, ctx) {
    const { init_imgs } = props;
    const map = inject<mapboxgl.Map>(MAP_SYMBOL)!;

    const load_img = async (name: string, url: string) => {
      const img = await new Promise<any>((res, rej) =>
        map.loadImage(url, (err: Error, img: any) => (err ? rej(err) : res(img))),
      );
      map.addImage(name, img);
    };
    const unload_imgs = () => {
      Object.keys(init_imgs).forEach(name => map.hasImage(name) && map.removeImage(name));
    };

    const is_imgs_loaded = shallowRef(false);
    onMounted(() => {
      Promise.all(Object.keys(init_imgs).map(name => load_img(name, init_imgs[name]))).then(
        _ => (is_imgs_loaded.value = true),
        err => {
          unload_imgs();
          throw err;
        },
      );
    });
    onUnmounted(() => unload_imgs());

    return () => h("div", [is_imgs_loaded.value && ctx.slots.default?.()]);
  },
});

export const Source = defineComponent({
  name: "MglSource",
  props: {
    source: {
      type: Object as () => mapboxgl.AnySourceData,
      required: true,
    },
  },
  setup(props, ctx) {
    const map = inject<mapboxgl.Map>(MAP_SYMBOL)!;
    const source_id = new_id();
    provide(SOURCE_ID_SYMBOL, source_id);
    map.addSource(source_id, props.source);
    onUnmounted(() => map.removeSource(source_id));
    watch(
      () => props.source,
      cv => {
        const s = map.getSource(source_id);
        if (s.type === "geojson") {
          s.setData((cv as mapboxgl.GeoJSONSourceRaw).data!);
        }
        if (s.type === "canvas") {
          const _cv = cv as mapboxgl.CanvasSourceRaw;
          s.setCoordinates(_cv.coordinates);
          _cv.animate ? s.play() : s.pause();
        }
        if (s.type === "image") {
          s.updateImage(cv as mapboxgl.ImageSourceRaw);
        }
        if (s.type === "raster") {
          // do nothing
        }
        if (s.type === "raster-dem") {
          // do nothing
        }
        if (s.type === "vector") {
          // do nothing
        }
        if (s.type === "video") {
          s.setCoordinates((cv as mapboxgl.VideoSourceRaw).coordinates!);
        }
      },
    );
    return () => h("div", [ctx.slots.default?.()]);
  },
});

export const GeojsonSource = defineComponent({
  name: "MglGeojsonSource",
  props: {
    init: Object as () => Omit<mapboxgl.GeoJSONSourceOptions, "data">,
    data: Object as () => mapboxgl.GeoJSONSourceOptions["data"],
  },
  setup(props, ctx) {
    const source = computed(() => {
      return { ...props.init, data: props.data, type: "geojson" };
    });
    return () => h(Source, { props: { source: source.value } }, [ctx.slots.default?.()]);
  },
});

export const CanvasSource = defineComponent({
  name: "MglCanvasSource",
  props: {
    init_canvas: ([String, Object] as any) as () => mapboxgl.CanvasSourceOptions["canvas"],
    coordinates: Array as () => mapboxgl.CanvasSourceOptions["coordinates"],
    animate: Boolean,
  },
  setup(props, ctx) {
    const ins = getCurrentInstance()!;
    const { init_canvas } = props;
    const should_create_canvas = !init_canvas;
    const canvas_ref = shallowRef(init_canvas);
    onMounted(() => {
      if (should_create_canvas) {
        canvas_ref.value = ins.$refs.canvas as HTMLCanvasElement;
      }
    });
    const source = computed(() => {
      return {
        canvas: canvas_ref.value,
        coordinates: props.coordinates,
        animate: props.animate,
      };
    });
    return () =>
      h("div", [
        should_create_canvas && h("canvas", { ref: "canvas", attrs: ctx.attrs }),
        canvas_ref.value && h(Source, { props: { source: source.value } }, [ctx.slots.default?.()]),
      ]);
  },
});

export const Layer = defineComponent({
  name: "MglLayer",
  props: {
    init_id: String,
    before_id: String,
    layer: {
      type: Object as () => Omit<mapboxgl.Layer, "id" | "source">,
      required: true,
    },
  },
  setup(props, ctx) {
    const map = inject<mapboxgl.Map>(MAP_SYMBOL)!;
    const source_id = inject<string>(SOURCE_ID_SYMBOL);
    const layer_id = props.init_id || new_id();

    map.addLayer({ ...props.layer as any, id: layer_id, source: source_id });
    onUnmounted(() => map.removeLayer(layer_id));
    watch(
      () => props.before_id,
      cv => map.moveLayer(layer_id, cv),
      { immediate: true },
    );
    watch(
      () => props.layer,
      (cv, pv, inv) => {
        const { layout = {} as any, paint = {} as any, filter, minzoom, maxzoom, ...other } = cv || {};
        const l = map.getLayer(layer_id);
        Object.keys(layout).forEach(key => map.setLayoutProperty(layer_id, key, layout[key]));
        Object.keys(paint).forEach(key => map.setPaintProperty(layer_id, key, paint[key]));
        map.setFilter(layer_id, filter);
        map.setLayerZoomRange(layer_id, minzoom!, maxzoom!);
        Object.assign(l, { ...other, id: layer_id, source: source_id });
        map.triggerRepaint();
      },
    );
    return () => null;
  },
});

export const Marker = defineComponent({
  name: "MglMarker",
  props: {
    lng_lat: {
      type: ([Object, Array] as any) as () => mapboxgl.LngLatLike,
      required: true,
    },
  },
  setup(props, ctx) {
    const ins = getCurrentInstance()!;
    const map = inject<mapboxgl.Map>(MAP_SYMBOL)!;
    onMounted(() => {
      const div = document.createElement("div");
      // ! 此种方式原本有问题就是 dom 的顺序与 jsx/template 无关, 而是与创建时间顺序有关, 导致想要 hover 的元素想要 z 轴覆盖其他元素必须让它更晚创建.
      // ! 至于 z-index 也是不行的, 因为 mapboxgl 给 marker div 增加了样式, 让内部元素的 z-index 无法透出
      // ! 这导致我们只能通过这种方式去修改 onMounted 里创建的 div
      // 其实主要问题是 ins.$el.parentElement 竟然一开始不存在
      const copy_css = () => {
        // mapbox-gl 自己会给元素增加 mapboxgl- 开头的 className 和 style.transform, 不得动它们
        div.className = div.className.split(/\s/).filter(it => it.startsWith('mapboxgl-')).concat(ins.$el.className).join(' ');
        // div.className = ins.$el.className;
        // div.setAttribute('style', ins.$el.getAttribute('style')!);
        div.style.cssText = div.style.cssText.match(/(transform\:\s.+\;)/)?.[1] + (ins.$el as HTMLDivElement).style.cssText;
      }
      copy_css();
      onUpdated(copy_css);
      const marker = new mapboxgl.Marker(div);
      onUnmounted(() => marker.remove());
      watch(
        () => props.lng_lat,
        cv => {
          marker.setLngLat(cv);
          marker.addTo(map);
        },
        { immediate: true },
      );

      const map_place: Node = document.createComment("");
      div.appendChild(map_place);
      const vue_place: Node = document.createComment("");
      const ele = ins.$el.firstElementChild!;
      const replace_in = () => {
        replace_dom(ele, vue_place);
        replace_dom(map_place, ele);
      }
      const replace_out = () => {
        replace_dom(ele, map_place);
        replace_dom(vue_place, ele);
      }
      replace_in();
      onBeforeUpdate(replace_out);
      onUpdated(replace_in);
      onBeforeUnmount(replace_out);
    });
    return () => h("div", [h("div", [ctx.slots.default?.()])]);
  },
});

// ! 目前默认是创建 mapboxgl.Popup 时是 closeOnClick=true, 那就会出现 mapboxgl.Popup 已经关闭了, 但当前这个 Popup vue 组件还存在的情况.
// ! 此时移动下 lng_lat 就能让 Popup 重新出现, 部分受控.
// ! 如果担心需要 Popup 出现, 但 lng_lat 并不变化(其实不可能, 因为它是 object/array), 可对 vue 组件加 key.
export const Popup = defineComponent({
  name: "MglPopup",
  props: {
    init: Object as () => mapboxgl.PopupOptions,
    lng_lat: {
      type: ([Object, Array] as any) as () => mapboxgl.LngLatLike,
      required: true,
    },
  },
  setup(props, ctx) {
    const ins = getCurrentInstance()!;
    const map = inject<mapboxgl.Map>(MAP_SYMBOL)!;
    onMounted(() => {
      const div = document.createElement("div");
      const popup = new mapboxgl.Popup(props.init);
      popup.setDOMContent(div);
      onUnmounted(() => popup.remove());
      watch(
        () => props.lng_lat,
        cv => {
          popup.setLngLat(cv);
          // * 随时都把 popup 重新加到 map 上, 避免用户因 closeOnClick=true 而关闭了 popup 之后就不能再打开它 的困境
          // * 那种困境下只能重新创建 vue 组件, 很麻烦...本质上其实是很多使用方式并不完全需要 事件 来进行完全的受控组件开发
          popup.addTo(map);
        },
        { immediate: true },
      );

      const map_place: Node = document.createComment("");
      div.appendChild(map_place);
      const vue_place: Node = document.createComment("");
      const ele = ins.$el.firstElementChild!;
      const replace_in = () => {
        replace_dom(ele, vue_place);
        replace_dom(map_place, ele);
      }
      const replace_out = () => {
        replace_dom(ele, map_place);
        replace_dom(vue_place, ele);
      }
      replace_in()
      onBeforeUpdate(replace_out);
      onUpdated(replace_in);
      onBeforeUnmount(replace_out);
    });
    return () => h("div", [h("div", [ctx.slots.default?.()])]);
  },
});
